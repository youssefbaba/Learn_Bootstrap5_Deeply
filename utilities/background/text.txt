
##########  how  generate background color  ###########
- in _utilities.scss 
    "background-color": (
        property: background-color,
        class: bg,
        local-vars: (
            "bg-opacity": 1
        ),
        values: map-merge(
            $utilities-bg-colors,
            (
            "transparent": transparent
            )
        )
    )
- in _varaibales.scss 

$theme-colors: (
  "primary":    $primary,
  "secondary":  $secondary,
  "success":    $success,
  "info":       $info,
  "warning":    $warning,
  "danger":     $danger,
  "light":      $light,
  "dark":       $dark
) !default;

$theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value") !default;

$theme-colors-rgb:(
    "primary": (13, 110, 253),
    "secondary": (108, 117, 125),
    "success": (25, 135, 84), 
    "info": (13, 202, 240),
    "warning": (255, 193, 7),
    "danger": (220, 53, 69),
    "light": (248, 249, 250),
    "dark": (33, 37, 41)
)

$utilities-colors: $theme-colors-rgb !default;

$utilities-bg: map-merge(
  $utilities-colors,
  (
    "black": to-rgb($black),
    "white": to-rgb($white),
    "body": to-rgb($body-bg)
  )
) !default;

$utilities-bg : (
    "primary": (13, 110, 253),
    "secondary": (108, 117, 125),
    "success": (25, 135, 84),
    "info": (13, 202, 240), 
    "warning": (255, 193, 7),
    "danger": (220, 53, 69),
    "light": (248, 249, 250),
    "dark": (33, 37, 41),
    "black": (0, 0, 0),
    "white": (255, 255, 255),
    "body": (255, 255, 255)
)
$utilities-bg-colors: map-loop($utilities-bg, rgba-css-var, "$key", "bg") !default;

$utilities-bg-colors: (
    "primary": rgba(var(--bs-primary-rgb), var(--bs-bg-opacity)),
    "secondary": rgba(var(--bs-secondary-rgb), var(--bs-bg-opacity)),
    "success": rgba(var(--bs-success-rgb), var(--bs-bg-opacity)),
    "info": rgba(var(--bs-info-rgb), var(--bs-bg-opacity)),
    "warning": rgba(var(--bs-warning-rgb), var(--bs-bg-opacity)),
    "danger": rgba(var(--bs-danger-rgb), var(--bs-bg-opacity)), 
    "light": rgba(var(--bs-light-rgb), var(--bs-bg-opacity)),
    "dark": rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)),
    "black": rgba(var(--bs-black-rgb), var(--bs-bg-opacity)), 
    "white": rgba(var(--bs-white-rgb), var(--bs-bg-opacity)), 
    "body": rgba(var(--bs-body-bg-rgb), var(--bs-bg-opacity))
)

map-merge(
    $utilities-bg-colors,
    (
    "transparent": transparent
    )
)

(
    "primary": rgba(var(--bs-primary-rgb), var(--bs-bg-opacity)),
    "secondary": rgba(var(--bs-secondary-rgb), var(--bs-bg-opacity)),
    "success": rgba(var(--bs-success-rgb), var(--bs-bg-opacity)),
    "info": rgba(var(--bs-info-rgb), var(--bs-bg-opacity)),
    "warning": rgba(var(--bs-warning-rgb), var(--bs-bg-opacity)),
    "danger": rgba(var(--bs-danger-rgb), var(--bs-bg-opacity)), 
    "light": rgba(var(--bs-light-rgb), var(--bs-bg-opacity)),
    "dark": rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)),
    "black": rgba(var(--bs-black-rgb), var(--bs-bg-opacity)), 
    "white": rgba(var(--bs-white-rgb), var(--bs-bg-opacity)), 
    "body": rgba(var(--bs-body-bg-rgb), var(--bs-bg-opacity)),
    "transparent": transparent
)
- output final :

.bg-primary{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-primary-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-secondary{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-secondary-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-success{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-success-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-info{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-info-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-warning{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-warning-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-danger{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-danger-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-light{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-light-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-dark{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-black{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-black-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-white{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-white-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-body{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-body-rgb), var(--bs-bg-opacity)) !important ; 
}
.bg-transparent{
    --bs-bg-opacity: 1 !important ;
    background-color :rgba(var(--bs-transparent-rgb), var(--bs-bg-opacity)) !important ; 
}


##########  how generate background gradient ###########
- in _utilities.scss 

    "gradient": (
      property: background-image,
      class: bg,
      values: (gradient: var(--#{$variable-prefix}gradient))
    )

- in _root.scss =>   --#{$variable-prefix}gradient: #{$gradient};
- in _variable.scss => $gradient: linear-gradient(180deg, rgba($white, .15), rgba($white, 0)) !default;
- final output :
.bg-gradient{
    background-image : linear-gradient(180deg, rgba($white, .15), rgba($white, 0)) !important ;
}


##########  how generate background opacity ###########
 - in _utilities.scss =>
   "bg-opacity": (
      css-var: true,
      class: bg-opacity,
      values: (
        10: .1,
        25: .25,
        50: .5,
        75: .75,
        100: 1
      )
    )

- output final :

.bg-opacity-10{
    --bs-bg-opacity : 0.1 !important ; 
}
.bg-opacity-25{
    --bs-bg-opacity : 0.25 !important ; 
}
.bg-opacity-50{
    --bs-bg-opacity : 0.5 !important ; 
}
.bg-opacity-75{
    --bs-bg-opacity : 0.75 !important ; 
}
.bg-opacity-100{
    --bs-bg-opacity : 1 !important ; 
}






